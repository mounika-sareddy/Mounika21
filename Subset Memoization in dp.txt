import java.util.Arrays;

public class SubsetSum {

    // Memoization-based approach
    public static boolean isSubsetSum(int[] arr, int n, int target, int[][] dp) {
        if (target == 0) {
            return true;
        }
        if (n == 0) {
            return false;
        }
        if (dp[n][target] != -1) {
            return dp[n][target] == 1;
        }
        if (arr[n - 1] > target) {
            dp[n][target] = isSubsetSum(arr, n - 1, target, dp) ? 1 : 0;
        } else {
            dp[n][target] = (isSubsetSum(arr, n - 1, target, dp) || isSubsetSum(arr, n - 1, target - arr[n - 1], dp)) ? 1 : 0;
        }
        return dp[n][target] == 1;
    }

    public static void main(String[] args) {
        int[] arr = {3, 3, 4, 4, 12, 5, 2};
        int target = 9;
        int n = arr.length;
        int[][] dp = new int[n + 1][target + 1];

        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        boolean result = isSubsetSum(arr, n, target, dp);
        System.out.println("Subset with given sum exists (memo): " + result);
    }
}
